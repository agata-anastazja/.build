(ns scripts.ci-configs
  (:require [clj-yaml.core :as yaml]
            [clojure.string :as str]
            [flatland.ordered.map :refer [ordered-map]]))

(defn jvm []
  (ordered-map
   :docker [{:image "circleci/clojure:openjdk-11-lein-2.9.8-bullseye"}]
   :working_directory "~/repo"
   :environment  {:LEIN_ROOT "true"
                  :BABASHKA_PLATFORM "linux"}
   :resources_class "large"
   :steps ["checkout"
           {:run {:name "Pull Submodules"
                  :command "git submodule init && git submodule update"}}]))

(defn linux []
  (ordered-map
   :docker [{:image "circleci/clojure:openjdk-11-lein-2.9.8-bullseye"}]
   :working_directory "~/repo"
   :environment  {:LEIN_ROOT "true"
                  :GRAALVM_VERSION "22.1.0"
                  :GRAALVM_HOME "/home/circleci/graalvm-ce-java11-22.1.0"
                  :BABASHKA_PLATFORM "linux"
                  :BABASHKA_TEST_ENV "native"
                  :BABASHKA_XMX "-J-Xmx6500m"}
   :resource_class "large"
   :steps ["checkout"
           {:run {:name "Pull Submodules"
                  :command "git submodule init && git submodule update"}}
           {:restore_cache {:keys ["linux-{{ checksum \"project.clj\" }}-{{ checksum \".circleci/config.yml\" }}"]}}
           {:run {:name "Install native dev tools"
                  :command "sudo apt-get update && sudo apt-get -y install build-essential zlib1g-dev"}}
           {:run {:name "Download GraalVM"
                  :command "script/install-graalvm"}}
           {:run {:name "Build binary"
                  :command "script/uberjar && script/compile"
                  :no_output_timeout "30m"}}
           {:run {:name "Run tests"
                  :command "script/test && script/run_lib_tests"}}
           {:run {:name "Release"
                  :command ".circleci/script/release"}}]))

(def config
  (ordered-map
   :version 2.1,
   :commands {:setup-docker-buildx {:steps [{:run {:name "Create multi-platform capabale buildx builder",
                                                   :command "docker run --privileged --rm tonistiigi/binfmt --install all docker buildx create --name ci-builder --use"}}]}}
   :jobs (ordered-map
          :jvm (jvm)
          :linux (linux)),
   :workflows (ordered-map
               :version 2
               :ci {:jobs ["jvm"
                           "linux"
                           "linux-static"
                           "mac"
                           "linux-aarch64"
                           "linux-aarch64-static"
                           {:deploy {:filters {:branches {:only "master"}}
                                     :requires ["jvm" "linux"]}}
                           {:docker {:filters {:branches {:only "master"}}
                                     :requires ["linux" "linux-static" "linux-aarch64"]}}]})))

(spit "foo.yml"
      (str "# This file is generated by script/generate_circleci.clj. Please do not edit here."

           (yaml/generate-string config
                                 :dumper-options {:flow-style :block}))) 
